apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-rest-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-rest-api
  template:
    metadata:
      labels:
        app: app-rest-api
    spec:
      containers:
      - name: rest-api
        image: "$REST_API_IMAGE"
        env:
        - name: APP_NAME
          value: "$APP_NAME"
        - name: PORT
          value: "8080"
        - name: PEER_ENDPOINT
          value: "$PEER-$ORG.$NAMESPACE.localho.st:443"
        - name: PEER_HOST_ALIAS
          value: "$PEER-$ORG.$NAMESPACE.localho.st"
        - name: TLS_CERT_PATH
          value: /config/cacert.pem
        - name: KEY_DIRECTORY_PATH
          value: /config/user-key
        - name: CERT_DIRECTORY_PATH
          value: /config/user-cert
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /config/cacert.pem
          name: ca-cert
          subPath: cacert.pem
          readOnly: true
        - mountPath: /config/user-key/key.pem
          subPath: key.pem
          name: user
          readOnly: true
        - mountPath: /config/user-cert/cert.pem
          subPath: cert.pem
          name: user
          readOnly: true
      volumes:
      - name: ca-cert
        secret:
          secretName: "$ORG-$PEER-tlsrootcert" # managed by operator
      - name: user
        secret:
          secretName: "$ORG-$USER" # managed by operator
---
apiVersion: v1
kind: Service
metadata:
  name: app-rest-api
  labels:
    app: app-rest-api
    service: app-rest-api
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: app-rest-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-frontend
  template:
    metadata:
      labels:
        app: app-frontend
    spec:
      containers:
      - name: frontend
        image: "$FRONTEND_IMAGE"
        env:
        - name: PORT
          value: "8080"
        - name: API_ENDPOINT
          value: "http://$REST_API_HOST/"
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app-frontend
  labels:
    app: app-frontend
    service: app-frontend
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: app-frontend
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: app-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "$FRONTEND_HOST"
    - "$REST_API_HOST"
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: app-rest-api
spec:
  hosts:
  - "$REST_API_HOST"
  gateways:
  - app-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app-rest-api
---
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: app-frontend
spec:
  hosts:
  - "$FRONTEND_HOST"
  gateways:
  - app-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: app-frontend
